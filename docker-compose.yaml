version: '3.8'  
x-postgres-common:     #section defines common configuration options for both the primary and replica PostgreSQL instances
  &postgres-common
  image: postgres:13    #Specifies the Docker image to use, postgres:13
  user: postgres         #Specifies the user under which the container runs, here it's postgres.
  restart: always         #Always restarting the container if it stops
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432    #Maps port 5432 on the host to port 5432 on the container.
    environment:      #Sets environment variables for PostgreSQL.
      POSTGRES_USER: myuser
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on       #Allows the server to run in standby mode.
      -c max_wal_senders=10     #Sets the maximum number of concurrent connections from standby servers.
      -c max_replication_slots=10   #Sets the maximum number of replication slots.
      -c hot_standby_feedback=on     #Sends feedback from standby to primary to prevent transaction ID wraparound.
    volumes:
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql

  postgres_replica: 
    <<: *postgres-common  
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary
